<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.min.someapp.dao.mapper.LoggingEventMapper">
	<resultMap id="BaseResultMap" type="com.min.someapp.dao.model.LoggingEvent">
		<id column="event_id" jdbcType="BIGINT" property="eventId" />
		<result column="timestmp" jdbcType="BIGINT" property="timestmp" />
		<result column="logger_name" jdbcType="VARCHAR" property="loggerName" />
		<result column="level_string" jdbcType="VARCHAR" property="levelString" />
		<result column="thread_name" jdbcType="VARCHAR" property="threadName" />
		<result column="reference_flag" jdbcType="SMALLINT" property="referenceFlag" />
		<result column="arg0" jdbcType="VARCHAR" property="arg0" />
		<result column="arg1" jdbcType="VARCHAR" property="arg1" />
		<result column="arg2" jdbcType="VARCHAR" property="arg2" />
		<result column="arg3" jdbcType="VARCHAR" property="arg3" />
		<result column="caller_filename" jdbcType="VARCHAR" property="callerFilename" />
		<result column="caller_class" jdbcType="VARCHAR" property="callerClass" />
		<result column="caller_method" jdbcType="VARCHAR" property="callerMethod" />
		<result column="caller_line" jdbcType="CHAR" property="callerLine" />
	</resultMap>
	<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
		type="com.min.someapp.dao.model.LoggingEvent">
		<result column="formatted_message" jdbcType="LONGVARCHAR"
			property="formattedMessage" />
	</resultMap>
	<sql id="Base_Column_List">
		event_id, timestmp, logger_name, level_string, thread_name, reference_flag,
		arg0,
		arg1, arg2, arg3, caller_filename, caller_class, caller_method, caller_line
	</sql>
	<sql id="Blob_Column_List">
		formatted_message
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from logging_event
		where event_id = #{eventId,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from logging_event
		where event_id = #{eventId,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="com.min.someapp.dao.model.LoggingEvent">
		insert into logging_event (event_id, timestmp, logger_name,
		level_string, thread_name, reference_flag,
		arg0, arg1, arg2, arg3,
		caller_filename, caller_class, caller_method,
		caller_line, formatted_message)
		values (#{eventId,jdbcType=BIGINT}, #{timestmp,jdbcType=BIGINT},
		#{loggerName,jdbcType=VARCHAR},
		#{levelString,jdbcType=VARCHAR}, #{threadName,jdbcType=VARCHAR}, #{referenceFlag,jdbcType=SMALLINT},
		#{arg0,jdbcType=VARCHAR}, #{arg1,jdbcType=VARCHAR},
		#{arg2,jdbcType=VARCHAR}, #{arg3,jdbcType=VARCHAR},
		#{callerFilename,jdbcType=VARCHAR}, #{callerClass,jdbcType=VARCHAR},
		#{callerMethod,jdbcType=VARCHAR},
		#{callerLine,jdbcType=CHAR}, #{formattedMessage,jdbcType=LONGVARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.min.someapp.dao.model.LoggingEvent">
		insert into logging_event
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="eventId != null">
				event_id,
			</if>
			<if test="timestmp != null">
				timestmp,
			</if>
			<if test="loggerName != null">
				logger_name,
			</if>
			<if test="levelString != null">
				level_string,
			</if>
			<if test="threadName != null">
				thread_name,
			</if>
			<if test="referenceFlag != null">
				reference_flag,
			</if>
			<if test="arg0 != null">
				arg0,
			</if>
			<if test="arg1 != null">
				arg1,
			</if>
			<if test="arg2 != null">
				arg2,
			</if>
			<if test="arg3 != null">
				arg3,
			</if>
			<if test="callerFilename != null">
				caller_filename,
			</if>
			<if test="callerClass != null">
				caller_class,
			</if>
			<if test="callerMethod != null">
				caller_method,
			</if>
			<if test="callerLine != null">
				caller_line,
			</if>
			<if test="formattedMessage != null">
				formatted_message,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="eventId != null">
				#{eventId,jdbcType=BIGINT},
			</if>
			<if test="timestmp != null">
				#{timestmp,jdbcType=BIGINT},
			</if>
			<if test="loggerName != null">
				#{loggerName,jdbcType=VARCHAR},
			</if>
			<if test="levelString != null">
				#{levelString,jdbcType=VARCHAR},
			</if>
			<if test="threadName != null">
				#{threadName,jdbcType=VARCHAR},
			</if>
			<if test="referenceFlag != null">
				#{referenceFlag,jdbcType=SMALLINT},
			</if>
			<if test="arg0 != null">
				#{arg0,jdbcType=VARCHAR},
			</if>
			<if test="arg1 != null">
				#{arg1,jdbcType=VARCHAR},
			</if>
			<if test="arg2 != null">
				#{arg2,jdbcType=VARCHAR},
			</if>
			<if test="arg3 != null">
				#{arg3,jdbcType=VARCHAR},
			</if>
			<if test="callerFilename != null">
				#{callerFilename,jdbcType=VARCHAR},
			</if>
			<if test="callerClass != null">
				#{callerClass,jdbcType=VARCHAR},
			</if>
			<if test="callerMethod != null">
				#{callerMethod,jdbcType=VARCHAR},
			</if>
			<if test="callerLine != null">
				#{callerLine,jdbcType=CHAR},
			</if>
			<if test="formattedMessage != null">
				#{formattedMessage,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.min.someapp.dao.model.LoggingEvent">
		update logging_event
		<set>
			<if test="timestmp != null">
				timestmp = #{timestmp,jdbcType=BIGINT},
			</if>
			<if test="loggerName != null">
				logger_name = #{loggerName,jdbcType=VARCHAR},
			</if>
			<if test="levelString != null">
				level_string = #{levelString,jdbcType=VARCHAR},
			</if>
			<if test="threadName != null">
				thread_name = #{threadName,jdbcType=VARCHAR},
			</if>
			<if test="referenceFlag != null">
				reference_flag = #{referenceFlag,jdbcType=SMALLINT},
			</if>
			<if test="arg0 != null">
				arg0 = #{arg0,jdbcType=VARCHAR},
			</if>
			<if test="arg1 != null">
				arg1 = #{arg1,jdbcType=VARCHAR},
			</if>
			<if test="arg2 != null">
				arg2 = #{arg2,jdbcType=VARCHAR},
			</if>
			<if test="arg3 != null">
				arg3 = #{arg3,jdbcType=VARCHAR},
			</if>
			<if test="callerFilename != null">
				caller_filename = #{callerFilename,jdbcType=VARCHAR},
			</if>
			<if test="callerClass != null">
				caller_class = #{callerClass,jdbcType=VARCHAR},
			</if>
			<if test="callerMethod != null">
				caller_method = #{callerMethod,jdbcType=VARCHAR},
			</if>
			<if test="callerLine != null">
				caller_line = #{callerLine,jdbcType=CHAR},
			</if>
			<if test="formattedMessage != null">
				formatted_message = #{formattedMessage,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where event_id = #{eventId,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.min.someapp.dao.model.LoggingEvent">
		update logging_event
		set timestmp = #{timestmp,jdbcType=BIGINT},
		logger_name = #{loggerName,jdbcType=VARCHAR},
		level_string = #{levelString,jdbcType=VARCHAR},
		thread_name = #{threadName,jdbcType=VARCHAR},
		reference_flag = #{referenceFlag,jdbcType=SMALLINT},
		arg0 = #{arg0,jdbcType=VARCHAR},
		arg1 = #{arg1,jdbcType=VARCHAR},
		arg2 = #{arg2,jdbcType=VARCHAR},
		arg3 = #{arg3,jdbcType=VARCHAR},
		caller_filename = #{callerFilename,jdbcType=VARCHAR},
		caller_class = #{callerClass,jdbcType=VARCHAR},
		caller_method = #{callerMethod,jdbcType=VARCHAR},
		caller_line = #{callerLine,jdbcType=CHAR},
		formatted_message = #{formattedMessage,jdbcType=LONGVARCHAR}
		where event_id = #{eventId,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.min.someapp.dao.model.LoggingEvent">
		update logging_event
		set timestmp = #{timestmp,jdbcType=BIGINT},
		logger_name = #{loggerName,jdbcType=VARCHAR},
		level_string = #{levelString,jdbcType=VARCHAR},
		thread_name = #{threadName,jdbcType=VARCHAR},
		reference_flag = #{referenceFlag,jdbcType=SMALLINT},
		arg0 = #{arg0,jdbcType=VARCHAR},
		arg1 = #{arg1,jdbcType=VARCHAR},
		arg2 = #{arg2,jdbcType=VARCHAR},
		arg3 = #{arg3,jdbcType=VARCHAR},
		caller_filename = #{callerFilename,jdbcType=VARCHAR},
		caller_class = #{callerClass,jdbcType=VARCHAR},
		caller_method = #{callerMethod,jdbcType=VARCHAR},
		caller_line = #{callerLine,jdbcType=CHAR}
		where event_id = #{eventId,jdbcType=BIGINT}
	</update>
	<select id="getRecordList" resultType="com.min.someapp.dao.model.LoggingEvent">
		select * from (
			select 
				event_id eventId,
				timestmp,
				logger_name loggerName,
				level_string levelString,
				thread_name threadName,
				reference_flag referenceFlag,
				arg0,
				arg1,
				arg2,
				arg3,
				caller_filename callerFilename,
				caller_class callerClass,
				caller_method callerMethod,
				caller_line callerLine,
				formatted_message formattedMessage
			from logging_event
			<where>
				<if test="filter.eventId !=null ">
					event_id = #{filter.eventId}
				</if>
				<if test="filter.timestmp !=null ">
					timestmp = #{filter.timestmp}
				</if>
				<if test="filter.loggerName !=null and filter.loggerName != ''">
					logger_name like '%${filter.loggerName}%'
				</if>
				<if test="filter.levelString !=null and filter.levelString != ''">
					level_string = #{filter.levelString}
				</if>
				<if test="filter.referenceFlag != null">
					reference_flag = #{filter.referenceFlag}
				</if>
				<if test="filter.arg0 !=null and filter.arg0 != ''">
					arg0 like '%${filter.arg0}%'
				</if>
				<if test="filter.arg1 !=null and filter.arg1 != ''">
					arg1 like '%${filter.arg1}%'
				</if>
				<if test="filter.arg2 !=null and filter.arg2 != ''">
					arg2 like '%${filter.arg2}%'
				</if>
				<if test="filter.arg3 !=null and filter.arg3 != ''">
					arg3 like '%${filter.arg3}%'
				</if>
				<if test="filter.callerFilename !=null and filter.callerFilename != ''">
					caller_filename like '%${filter.callerFilename}%'
				</if>
				<if test="filter.callerClass !=null and filter.callerClass != ''">
					caller_class like '%${filter.callerClass}%'
				</if>
				<if test="filter.callerMethod !=null and filter.callerMethod != ''">
					caller_method like '%${filter.callerMethod}%'
				</if>
				<if test="filter.callerLine !=null and filter.callerMethod != ''">
					caller_line like '%${filter.callerLine}%'
				</if>
				<if test="filter.formattedMessage !=null and filter.formattedMessage != ''">
					formatted_message like '%${filter.formattedMessage}%'
				</if>
			</where>
		) t
		order by ${pageAndSort.field} ${pageAndSort.sord}
		limit ${(pageAndSort.page-1)*pageAndSort.limit},${pageAndSort.limit}
	</select>
	<select id="getRecordListCount" resultType="long">
		select 
			count(*)
		from logging_event
		<where>
			<if test="filter.eventId !=null ">
				event_id = #{filter.eventId}
			</if>
			<if test="filter.timestmp !=null ">
				timestmp = #{filter.timestmp}
			</if>
			<if test="filter.loggerName !=null and filter.loggerName != ''">
				logger_name like '%${filter.loggerName}%'
			</if>
			<if test="filter.levelString !=null and filter.levelString != ''">
				level_string like '%${filter.levelString}%'
			</if>
			<if test="filter.referenceFlag != null">
				reference_flag = #{filter.referenceFlag}
			</if>
			<if test="filter.arg0 !=null and filter.arg0 != ''">
				arg0 like '%${filter.arg0}%'
			</if>
			<if test="filter.arg1 !=null and filter.arg1 != ''">
				arg1 like '%${filter.arg1}%'
			</if>
			<if test="filter.arg2 !=null and filter.arg2 != ''">
				arg2 like '%${filter.arg2}%'
			</if>
			<if test="filter.arg3 !=null and filter.arg3 != ''">
				arg3 like '%${filter.arg3}%'
			</if>
			<if test="filter.callerFilename !=null and filter.callerFilename != ''">
				caller_filename like '%${filter.callerFilename}%'
			</if>
			<if test="filter.callerClass !=null and filter.callerClass != ''">
				caller_class like '%${filter.callerClass}%'
			</if>
			<if test="filter.callerMethod !=null and filter.callerMethod != ''">
				caller_method like '%${filter.callerMethod}%'
			</if>
			<if test="filter.callerLine !=null and filter.callerMethod != ''">
				caller_line like '%${filter.callerLine}%'
			</if>
			<if test="filter.formattedMessage !=null and filter.formattedMessage != ''">
				formatted_message like '%${filter.formattedMessage}%'
			</if>
		</where>
	</select>
</mapper>