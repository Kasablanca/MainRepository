<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.syhd.ahriman.dao.mapper.KpiPayMapper">
	<resultMap id="BaseResultMap"
		type="com.syhd.ahriman.dao.model.KpiPay">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="date" jdbcType="DATE" property="date" />
		<result column="server_id" jdbcType="INTEGER"
			property="serverId" />
		<result column="platform" jdbcType="VARCHAR"
			property="platform" />
		<result column="active_user_number" jdbcType="INTEGER"
			property="activeUserNumber" />
		<result column="revenue" jdbcType="DECIMAL" property="revenue" />
		<result column="pay_user_number" jdbcType="INTEGER"
			property="payUserNumber" />
		<result column="old_player_number" jdbcType="INTEGER"
			property="oldPlayerNumber" />
		<result column="old_pay_revenue" jdbcType="DECIMAL"
			property="oldPayRevenue" />
		<result column="old_pay_number" jdbcType="INTEGER"
			property="oldPayNumber" />
		<result column="new_player_number" jdbcType="INTEGER"
			property="newPlayerNumber" />
		<result column="new_pay_revenue" jdbcType="DECIMAL"
			property="newPayRevenue" />
		<result column="new_pay_number" jdbcType="INTEGER"
			property="newPayNumber" />
	</resultMap>
	<sql id="Base_Column_List">
		id, date, server_id, platform, active_user_number, revenue,
		pay_user_number, old_player_number,
		old_pay_revenue, old_pay_number, new_player_number, new_pay_revenue, new_pay_number
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_kpi_pay
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from t_kpi_pay
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert"
		parameterType="com.syhd.ahriman.dao.model.KpiPay">
		insert into t_kpi_pay (id, date, server_id,
		platform, active_user_number, revenue,
		pay_user_number, old_player_number, old_pay_revenue,
		old_pay_number, new_player_number, new_pay_revenue,
		new_pay_number)
		values (#{id,jdbcType=BIGINT}, #{date,jdbcType=DATE},
		#{serverId,jdbcType=INTEGER},
		#{platform,jdbcType=VARCHAR}, #{activeUserNumber,jdbcType=INTEGER}, #{revenue,jdbcType=DECIMAL},
		#{payUserNumber,jdbcType=INTEGER},
		#{oldPlayerNumber,jdbcType=INTEGER},
		#{oldPayRevenue,jdbcType=DECIMAL},
		#{oldPayNumber,jdbcType=INTEGER}, #{newPlayerNumber,jdbcType=INTEGER},
		#{newPayRevenue,jdbcType=DECIMAL},
		#{newPayNumber,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective"
		parameterType="com.syhd.ahriman.dao.model.KpiPay">
		insert into t_kpi_pay
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="date != null">
				date,
			</if>
			<if test="serverId != null">
				server_id,
			</if>
			<if test="platform != null">
				platform,
			</if>
			<if test="activeUserNumber != null">
				active_user_number,
			</if>
			<if test="revenue != null">
				revenue,
			</if>
			<if test="payUserNumber != null">
				pay_user_number,
			</if>
			<if test="oldPlayerNumber != null">
				old_player_number,
			</if>
			<if test="oldPayRevenue != null">
				old_pay_revenue,
			</if>
			<if test="oldPayNumber != null">
				old_pay_number,
			</if>
			<if test="newPlayerNumber != null">
				new_player_number,
			</if>
			<if test="newPayRevenue != null">
				new_pay_revenue,
			</if>
			<if test="newPayNumber != null">
				new_pay_number,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="date != null">
				#{date,jdbcType=DATE},
			</if>
			<if test="serverId != null">
				#{serverId,jdbcType=INTEGER},
			</if>
			<if test="platform != null">
				#{platform,jdbcType=VARCHAR},
			</if>
			<if test="activeUserNumber != null">
				#{activeUserNumber,jdbcType=INTEGER},
			</if>
			<if test="revenue != null">
				#{revenue,jdbcType=DECIMAL},
			</if>
			<if test="payUserNumber != null">
				#{payUserNumber,jdbcType=INTEGER},
			</if>
			<if test="oldPlayerNumber != null">
				#{oldPlayerNumber,jdbcType=INTEGER},
			</if>
			<if test="oldPayRevenue != null">
				#{oldPayRevenue,jdbcType=DECIMAL},
			</if>
			<if test="oldPayNumber != null">
				#{oldPayNumber,jdbcType=INTEGER},
			</if>
			<if test="newPlayerNumber != null">
				#{newPlayerNumber,jdbcType=INTEGER},
			</if>
			<if test="newPayRevenue != null">
				#{newPayRevenue,jdbcType=DECIMAL},
			</if>
			<if test="newPayNumber != null">
				#{newPayNumber,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.syhd.ahriman.dao.model.KpiPay">
		update t_kpi_pay
		<set>
			<if test="date != null">
				date = #{date,jdbcType=DATE},
			</if>
			<if test="serverId != null">
				server_id = #{serverId,jdbcType=INTEGER},
			</if>
			<if test="platform != null">
				platform = #{platform,jdbcType=VARCHAR},
			</if>
			<if test="activeUserNumber != null">
				active_user_number = #{activeUserNumber,jdbcType=INTEGER},
			</if>
			<if test="revenue != null">
				revenue = #{revenue,jdbcType=DECIMAL},
			</if>
			<if test="payUserNumber != null">
				pay_user_number = #{payUserNumber,jdbcType=INTEGER},
			</if>
			<if test="oldPlayerNumber != null">
				old_player_number = #{oldPlayerNumber,jdbcType=INTEGER},
			</if>
			<if test="oldPayRevenue != null">
				old_pay_revenue = #{oldPayRevenue,jdbcType=DECIMAL},
			</if>
			<if test="oldPayNumber != null">
				old_pay_number = #{oldPayNumber,jdbcType=INTEGER},
			</if>
			<if test="newPlayerNumber != null">
				new_player_number = #{newPlayerNumber,jdbcType=INTEGER},
			</if>
			<if test="newPayRevenue != null">
				new_pay_revenue = #{newPayRevenue,jdbcType=DECIMAL},
			</if>
			<if test="newPayNumber != null">
				new_pay_number = #{newPayNumber,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.syhd.ahriman.dao.model.KpiPay">
		update t_kpi_pay
		set date = #{date,jdbcType=DATE},
		server_id = #{serverId,jdbcType=INTEGER},
		platform = #{platform,jdbcType=VARCHAR},
		active_user_number = #{activeUserNumber,jdbcType=INTEGER},
		revenue = #{revenue,jdbcType=DECIMAL},
		pay_user_number = #{payUserNumber,jdbcType=INTEGER},
		old_player_number = #{oldPlayerNumber,jdbcType=INTEGER},
		old_pay_revenue = #{oldPayRevenue,jdbcType=DECIMAL},
		old_pay_number = #{oldPayNumber,jdbcType=INTEGER},
		new_player_number = #{newPlayerNumber,jdbcType=INTEGER},
		new_pay_revenue = #{newPayRevenue,jdbcType=DECIMAL},
		new_pay_number = #{newPayNumber,jdbcType=INTEGER}
		where id = #{id,jdbcType=BIGINT}
	</update>
	<select id="getStatistic" resultType="com.syhd.ahriman.dto.KpiPayVO">
		select 
			date,
			IFNULL(sum(active_user_number),0) activeUserNumber,
			IFNULL(sum(revenue),0) revenue,
			IFNULL(sum(pay_user_number),0) payUserNumber,
			IFNULL(sum(revenue)/sum(pay_user_number),0) payArppu,
			IFNULL(sum(pay_user_number)/sum(active_user_number),0) payRate,
			IFNULL(sum(revenue)/sum(active_user_number),0) activeArpu,
			IFNULL(sum(old_player_number),0) oldPlayerNumber,
			IFNULL(sum(old_pay_revenue),0) oldPayRevenue,
			IFNULL(sum(old_pay_number),0) oldPayNumber,
			IFNULL(sum(old_pay_revenue)/sum(old_pay_number),0) payArppuOld,
			IFNULL(sum(old_pay_number)/sum(old_player_number),0) payRateOld,
			IFNULL(sum(old_pay_revenue)/sum(old_player_number),0) activeArpuOld,
			IFNULL(sum(new_player_number),0) newPlayerNumber,
			IFNULL(sum(new_pay_revenue),0) newPayRevenue,
			IFNULL(sum(new_pay_number),0) newPayNumber,
			IFNULL(sum(new_pay_revenue)/sum(new_pay_number),0) payArppuNew,
			IFNULL(sum(new_pay_number)/sum(new_player_number),0) payRateNew,
			IFNULL(sum(new_pay_revenue)/sum(new_player_number),0) activeArpuNew
		from t_kpi_pay
		where date &gt;= #{param.start} and date &lt; #{param.end}
		<if test="param.platform != null and param.platform.length &gt; 0">
			and platform in
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<foreach collection="param.platform" item="item">
					#{item},
				</foreach>
			</trim>
		</if>
		<if test="param.serverId != null and param.serverId.length &gt; 0">
			and server_id in
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<foreach collection="param.serverId" item="item">
					#{item},
				</foreach>
			</trim>
		</if>
		group by date
		order by ${pageAndSort.field} ${pageAndSort.sord}
		limit ${(pageAndSort.page-1)*pageAndSort.limit},${pageAndSort.limit}
	</select>
	<select id="getStatisticCount" resultType="long">
		select count(distinct date)
		from t_kpi_pay
		where date &gt;= #{param.start} and date &lt; #{param.end}
		<if test="param.platform != null and param.platform.length &gt; 0">
			and platform in
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<foreach collection="param.platform" item="item">
					#{item},
				</foreach>
			</trim>
		</if>
		<if test="param.serverId != null and param.serverId.length &gt; 0">
			and server_id in
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<foreach collection="param.serverId" item="item">
					#{item},
				</foreach>
			</trim>
		</if>
	</select>
	<select id="getAllPlatform" resultType="string">
		select distinct platform from t_kpi_pay
	</select>
	<select id="getLastCountDate" resultType="java.util.Date">
		select max(date) from t_kpi_pay where server_id = #{serverId}
	</select>
	<insert id="batchInsert">
		insert into t_kpi_pay (date, server_id, platform, active_user_number, revenue,
		pay_user_number, old_player_number,
		old_pay_revenue, old_pay_number, new_player_number, new_pay_revenue, new_pay_number) 
		values <trim suffixOverrides=",">
			<foreach collection="records" item="record">
				(#{record.date,jdbcType=DATE}, #{record.serverId,jdbcType=INTEGER},
				#{record.platform,jdbcType=VARCHAR}, #{record.activeUserNumber,jdbcType=INTEGER}, 
				#{record.revenue,jdbcType=DECIMAL}, #{record.payUserNumber,jdbcType=INTEGER},
				#{record.oldPlayerNumber,jdbcType=INTEGER}, #{record.oldPayRevenue,jdbcType=DECIMAL},
				#{record.oldPayNumber,jdbcType=INTEGER}, #{record.newPlayerNumber,jdbcType=INTEGER},
				#{record.newPayRevenue,jdbcType=DECIMAL}, #{record.newPayNumber,jdbcType=INTEGER}),
			</foreach>
		</trim>
	</insert>
	<update id="createTodayKpiPayTable" statementType="CALLABLE">
		{call create_temp_kpi_pay_table()}
	</update>
	<insert id="batchInsertTemp">
		insert into t_today_kpi_pay (date, server_id, platform, active_user_number, revenue,
		pay_user_number, old_player_number,
		old_pay_revenue, old_pay_number, new_player_number, new_pay_revenue, new_pay_number) 
		values <trim suffixOverrides=",">
			<foreach collection="records" item="record">
				(#{record.date,jdbcType=DATE}, #{record.serverId,jdbcType=INTEGER},
				#{record.platform,jdbcType=VARCHAR}, #{record.activeUserNumber,jdbcType=INTEGER}, 
				#{record.revenue,jdbcType=DECIMAL}, #{record.payUserNumber,jdbcType=INTEGER},
				#{record.oldPlayerNumber,jdbcType=INTEGER}, #{record.oldPayRevenue,jdbcType=DECIMAL},
				#{record.oldPayNumber,jdbcType=INTEGER}, #{record.newPlayerNumber,jdbcType=INTEGER},
				#{record.newPayRevenue,jdbcType=DECIMAL}, #{record.newPayNumber,jdbcType=INTEGER}),
			</foreach>
		</trim>
	</insert>
	<select id="getMixinStatistic" resultType="com.syhd.ahriman.dto.KpiPayVO">
		select
			date,
			IFNULL(sum(active_user_number),0) activeUserNumber,
			IFNULL(sum(revenue),0) revenue,
			IFNULL(sum(pay_user_number),0) payUserNumber,
			IFNULL(sum(revenue)/sum(pay_user_number),0) payArppu,
			IFNULL(sum(pay_user_number)/sum(active_user_number),0) payRate,
			IFNULL(sum(revenue)/sum(active_user_number),0) activeArpu,
			IFNULL(sum(old_player_number),0) oldPlayerNumber,
			IFNULL(sum(old_pay_revenue),0) oldPayRevenue,
			IFNULL(sum(old_pay_number),0) oldPayNumber,
			IFNULL(sum(old_pay_revenue)/sum(old_pay_number),0) payArppuOld,
			IFNULL(sum(old_pay_number)/sum(old_player_number),0) payRateOld,
			IFNULL(sum(old_pay_revenue)/sum(old_player_number),0) activeArpuOld,
			IFNULL(sum(new_player_number),0) newPlayerNumber,
			IFNULL(sum(new_pay_revenue),0) newPayRevenue,
			IFNULL(sum(new_pay_number),0) newPayNumber,
			IFNULL(sum(new_pay_revenue)/sum(new_pay_number),0) payArppuNew,
			IFNULL(sum(new_pay_number)/sum(new_player_number),0) payRateNew,
			IFNULL(sum(new_pay_revenue)/sum(new_player_number),0) activeArpuNew
		from (
			select 
				date, active_user_number, revenue,
				pay_user_number, old_player_number,
				old_pay_revenue, old_pay_number, new_player_number, new_pay_revenue, new_pay_number
			from t_kpi_pay
			where date &gt;= #{param.start}
			<if test="param.platform != null and param.platform.length &gt; 0">
				and platform in
				<trim prefix="(" suffix=")" suffixOverrides=",">
					<foreach collection="param.platform" item="item">
						#{item},
					</foreach>
				</trim>
			</if>
			<if test="param.serverId != null and param.serverId.length &gt; 0">
				and server_id in
				<trim prefix="(" suffix=")" suffixOverrides=",">
					<foreach collection="param.serverId" item="item">
						#{item},
					</foreach>
				</trim>
			</if>
			union all
			select 
				date, active_user_number, revenue,
				pay_user_number, old_player_number,
				old_pay_revenue, old_pay_number, new_player_number, new_pay_revenue, new_pay_number
			from t_today_kpi_pay
			where date &gt;= #{param.start}
			<if test="param.platform != null and param.platform.length &gt; 0">
				and platform in
				<trim prefix="(" suffix=")" suffixOverrides=",">
					<foreach collection="param.platform" item="item">
						#{item},
					</foreach>
				</trim>
			</if>
			<if test="param.serverId != null and param.serverId.length &gt; 0">
				and server_id in
				<trim prefix="(" suffix=")" suffixOverrides=",">
					<foreach collection="param.serverId" item="item">
						#{item},
					</foreach>
				</trim>
			</if>
		)t
		group by date
		order by ${pageAndSort.field} ${pageAndSort.sord}
		limit ${(pageAndSort.page-1)*pageAndSort.limit},${pageAndSort.limit}
	</select>
	<select id="getMixinStatisticCount" resultType="long">
		select IFNUll(count(date),0) from (
			select distinct date
			from t_kpi_pay
			where date &gt;= #{param.start}
			<if test="param.platform != null and param.platform.length &gt; 0">
				and platform in
				<trim prefix="(" suffix=")" suffixOverrides=",">
					<foreach collection="param.platform" item="item">
						#{item},
					</foreach>
				</trim>
			</if>
			<if test="param.serverId != null and param.serverId.length &gt; 0">
				and server_id in
				<trim prefix="(" suffix=")" suffixOverrides=",">
					<foreach collection="param.serverId" item="item">
						#{item},
					</foreach>
				</trim>
			</if>
			union all
			select distinct date
			from t_today_kpi_pay
			where date &gt;= #{param.start}
			<if test="param.platform != null and param.platform.length &gt; 0">
				and platform in
				<trim prefix="(" suffix=")" suffixOverrides=",">
					<foreach collection="param.platform" item="item">
						#{item},
					</foreach>
				</trim>
			</if>
			<if test="param.serverId != null and param.serverId.length &gt; 0">
				and server_id in
				<trim prefix="(" suffix=")" suffixOverrides=",">
					<foreach collection="param.serverId" item="item">
						#{item},
					</foreach>
				</trim>
			</if>
		)t
	</select>
</mapper>